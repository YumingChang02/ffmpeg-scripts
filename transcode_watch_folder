#!/bin/bash
EXPECTED_ARGS=3
ARGC=$#

if [[ "${1}" = \.\_* ]]
then
    echo "MAC Garbage"
    rm -v "${1}" >> /tmp/success.log
    exit
fi
output_path="${3}"
cd /home/workspace/input
FAILED_FOLDER="/home/workspace/failed"
random_suffix=$( echo $RANDOM | md5sum | head -c 20 )
file_name=$( basename "${1}" )
FORMAT=$(mediainfo --Inform="Video;%Format%" "${1}")
echo "Transcoding ${1} from format $FORMAT with quality ${2} to h265; tempfile : /tmp/temp_$random_suffix.mp4; Output Path : $output_path"

if [[ $FORMAT =~ "HEVC" ]]; then
    echo "File : ${1} already in HEVC format, skipping ..."
    mv "${1}" "$output_path/$file_name"
else
    # qsv_sel="$( ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1 "${1}" | cut -d= -f2 )_qsv"
    # ffmpeg -y -stats -loglevel error -hwaccel qsv -qsv_device /dev/dri/renderD129 -c:v "$qsv_sel" -i "${1}" -c:v hevc_qsv -global_quality "${2}" /tmp/temp_"$random_suffix".mp4
    # possible remove ,scale_qsv=w=1920:h=-1 if bug fixed https://trac.ffmpeg.org/ticket/10856
    echo "ffmpeg -y -stats -loglevel error -init_hw_device vaapi:/dev/dri/renderD129 -hwaccel vaapi -hwaccel_output_format vaapi -i ${1} -vf 'hwmap=derive_device=qsv,scale_qsv=w=1920:h=-1' -c:v hevc_qsv -global_quality ${2} /tmp/temp_$random_suffix.mp4" # remove scale if bug fixed
    ffmpeg -y -stats -loglevel error -init_hw_device vaapi:/dev/dri/renderD129 -hwaccel vaapi -hwaccel_output_format vaapi -i "${1}" -vf 'hwmap=derive_device=qsv,scale_qsv=w=1920:h=-1' -c:v hevc_qsv -global_quality "${2}" /tmp/temp_"$random_suffix".mp4
    status=$?
    if [ $status -eq 0 ]; then
        if [[ $(stat -c%s /tmp/temp_$random_suffix.mp4) -ge $(stat -c%s "${1}") ]]; then
            du -sh "${1}" && du -sh /tmp/temp_"$random_suffix".mp4
            echo "flock -x /tmp/.cpu-transcode.lock ffmpeg -y -stats -loglevel error -hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi -i ${1} -vf 'hwdownload,format=nv12' -vcodec libx265 -crf ${2} /tmp/temp_$random_suffix.mp4"
            flock -x /tmp/.cpu-transcode.lock ffmpeg -y -stats -loglevel error -hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi -i "${1}" -vf 'hwdownload,format=nv12' -vcodec libx265 -crf "${2}" /tmp/temp_"$random_suffix".mp4
            status=$?
            if [ $status -ne 0 ]; then
                echo "${1}" >> /tmp/transcode.failed && rm -v /tmp/temp_"$random_suffix".mp4 && mv -v "${1}" "$FAILED_FOLDER"
                exit 0
            fi
        fi
        echo "${1}" >> /tmp/success.log
        du -sh "${1}" && du -sh /tmp/temp_"$random_suffix".mp4 && rm "${1}" && mv -v /tmp/temp_"$random_suffix".mp4 "$output_path/${file_name%.*}.mp4"
    else
        #echo "flock -x /tmp/.cpu-transcode.lock ffmpeg -y -stats -loglevel error -init_hw_device qsv=hw,child_device=/dev/dri/renderD128 -filter_hw_device hw -i ${1} -vf \"hwupload=extra_hw_frames=64,format=qsv\" -c:v hevc_qsv -global_quality ${2} /tmp/temp_$random_suffix.mp4"
        #flock -x /tmp/.cpu-transcode.lock ffmpeg -y -stats -loglevel error -init_hw_device qsv=hw,child_device=/dev/dri/renderD128 -filter_hw_device hw -i "${1}" -vf "hwupload=extra_hw_frames=64,format=qsv" -c:v hevc_qsv -global_quality "${2}" /tmp/temp_"$random_suffix".mp4
        echo "flock -x /tmp/.cpu-transcode.lock ffmpeg -y -stats -loglevel error -i "${1}" -vcodec libx265 -crf "${2}" /tmp/temp_"$random_suffix".mp4"
        flock -x /tmp/.cpu-transcode.lock ffmpeg -y -stats -loglevel error -i "${1}" -vcodec libx265 -crf "${2}" /tmp/temp_"$random_suffix".mp4
        status=$?
        if [ $status -eq 0 ]; then
            echo "${1}" >> /tmp/success.log
            du -sh "${1}" && du -sh /tmp/temp_"$random_suffix".mp4 && rm "${1}" && mv -v /tmp/temp_"$random_suffix".mp4 "$output_path/${file_name%.*}.mp4"
        else
            echo "${1}" >> /tmp/transcode.failed && rm -vf /tmp/temp_"$random_suffix".mp4 && mv -v "${1}" "$FAILED_FOLDER"
        fi
    fi
fi
